//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SiloInventoryManagement.Model
{
    using System;
    using System.Configuration;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using UXCypherLib;

    public partial class SiloInventoryEntityDataModel : DbContext
    {
        public SiloInventoryEntityDataModel()
            : base(GetConnectionString())
        {
            this.Database.CommandTimeout = 360;
        }

        private static string GetConnectionString()
        {
            //NCypher encryptionLibrary = new NCypher();
            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringHelper.Entities].ConnectionString;
            //string password = encryptionLibrary.Decrypt(ConfigurationManager.AppSettings[ConnectionStringHelper.PasswordKey]);
            //int startIndex = connectionString.IndexOf("User ID=");
            //int endIndex = connectionString.IndexOf(";", startIndex);
            //connectionString = connectionString.Replace(connectionString.Substring(startIndex, endIndex - startIndex), string.Format("{0};Password={1}", connectionString.Substring(startIndex, endIndex - startIndex), password));
            return connectionString;
        }

        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<RecordType> RecordTypes { get; set; }
        public virtual DbSet<Exception> Exceptions { get; set; }
        public virtual DbSet<SiloInventory> SiloInventories { get; set; }
    
        public virtual ObjectResult<SiloInventory> up_SiloInventory_GetByDateRange(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SiloInventory>("up_SiloInventory_GetByDateRange", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SiloInventory> up_SiloInventory_GetByDateRange(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, MergeOption mergeOption)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SiloInventory>("up_SiloInventory_GetByDateRange", mergeOption, startDateParameter, endDateParameter);
        }
    
        public virtual int up_Locations_Insert(string locationDescription, ObjectParameter locationID)
        {
            var locationDescriptionParameter = locationDescription != null ?
                new ObjectParameter("LocationDescription", locationDescription) :
                new ObjectParameter("LocationDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_Locations_Insert", locationDescriptionParameter, locationID);
        }
    
        public virtual int up_Locations_Update(string locationDescription, Nullable<int> locationID)
        {
            var locationDescriptionParameter = locationDescription != null ?
                new ObjectParameter("LocationDescription", locationDescription) :
                new ObjectParameter("LocationDescription", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_Locations_Update", locationDescriptionParameter, locationIDParameter);
        }
    
        public virtual int up_RecordTypes_Insert(string recordTypeDescription, ObjectParameter recordTypeID)
        {
            var recordTypeDescriptionParameter = recordTypeDescription != null ?
                new ObjectParameter("RecordTypeDescription", recordTypeDescription) :
                new ObjectParameter("RecordTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_RecordTypes_Insert", recordTypeDescriptionParameter, recordTypeID);
        }
    
        public virtual int up_RecordTypes_Update(string recordTypeDescription, Nullable<int> recordTypeID)
        {
            var recordTypeDescriptionParameter = recordTypeDescription != null ?
                new ObjectParameter("RecordTypeDescription", recordTypeDescription) :
                new ObjectParameter("RecordTypeDescription", typeof(string));
    
            var recordTypeIDParameter = recordTypeID.HasValue ?
                new ObjectParameter("RecordTypeID", recordTypeID) :
                new ObjectParameter("RecordTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_RecordTypes_Update", recordTypeDescriptionParameter, recordTypeIDParameter);
        }
    
        public virtual ObjectResult<Location> up_Locations_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("up_Locations_Get");
        }
    
        public virtual ObjectResult<Location> up_Locations_Get(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("up_Locations_Get", mergeOption);
        }
    
        public virtual ObjectResult<RecordType> up_RecordTypes_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecordType>("up_RecordTypes_Get");
        }
    
        public virtual ObjectResult<RecordType> up_RecordTypes_Get(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecordType>("up_RecordTypes_Get", mergeOption);
        }
    
        public virtual int up_SiloInventory_Insert(Nullable<int> recordTypeID, Nullable<int> locationID, Nullable<System.DateTime> date, Nullable<decimal> value, string comment, string enteredBy, Nullable<System.DateTime> dateModified, ObjectParameter siloInventoryID)
        {
            var recordTypeIDParameter = recordTypeID.HasValue ?
                new ObjectParameter("RecordTypeID", recordTypeID) :
                new ObjectParameter("RecordTypeID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_SiloInventory_Insert", recordTypeIDParameter, locationIDParameter, dateParameter, valueParameter, commentParameter, enteredByParameter, dateModifiedParameter, siloInventoryID);
        }
    
        public virtual int up_SiloInventory_Update(Nullable<int> siloInventoryID, Nullable<int> locationID, Nullable<System.DateTime> date, Nullable<decimal> value, string comment, string enteredBy)
        {
            var siloInventoryIDParameter = siloInventoryID.HasValue ?
                new ObjectParameter("SiloInventoryID", siloInventoryID) :
                new ObjectParameter("SiloInventoryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_SiloInventory_Update", siloInventoryIDParameter, locationIDParameter, dateParameter, valueParameter, commentParameter, enteredByParameter);
        }
    
        public virtual int up_Exceptions_Insert(string message, string stackTrace)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("up_Exceptions_Insert", messageParameter, stackTraceParameter);
        }
    }
}
